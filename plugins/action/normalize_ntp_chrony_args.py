
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type


import textwrap

from ansible.errors import AnsibleOptionsError
##from ansible.plugins.filter.core import to_bool

from ansible_collections.smabot.base.plugins.module_utils.plugins.config_normalizing.base import \
  ConfigNormalizerBase, \
  DefaultSetterConstant, \
  NormalizerBase, \
  NormalizerNamed

from ansible_collections.smabot.base.plugins.module_utils.utils.dicting import get_subdict, setdefault_none, SUBDICT_METAKEY_ANY
##from ansible_collections.smabot.base.plugins.module_utils.utils.utils import ansible_assert



class RootCfgNormalizer(NormalizerBase):

    def __init__(self, pluginref, *args, **kwargs):
        subnorms = kwargs.setdefault('sub_normalizers', [])
        subnorms += [
          NtpNormer(pluginref),
        ]

        super(RootCfgNormalizer, self).__init__(pluginref, *args, **kwargs)


class NtpNormer(NormalizerBase):

    def __init__(self, pluginref, *args, **kwargs):
        self._add_defaultsetter(kwargs, 
          'enabled', DefaultSetterConstant(True)
        )

        self._add_defaultsetter(kwargs, 
          'base_template', DefaultSetterConstant('chrony.conf.j2')
        )

        subnorms = kwargs.setdefault('sub_normalizers', [])
        subnorms += [
          NtpSourcesNormer(pluginref),
        ]

        super(NtpNormer, self).__init__(pluginref, *args, **kwargs)

    @property
    def config_path(self):
        return ['ntp']

    @property
    def simpleform_key(self):
        return 'enabled'

    def _handle_specifics_presub(self, cfg, my_subcfg, cfgpath_abs):
        export_cfgs = {}
        enabled = my_subcfg['enabled']

        # create os package config
        tmp = {
          'name': 'chrony'
        }

        if enabled:
            tmp['state'] = 'latest'
        else:
            tmp['state'] = 'absent'

        export_cfgs['os_packages'] = tmp

        # create service config
        tmp = {
          'name': 'chronyd'
        }

        if enabled:
            tmp['state'] = 'started'
            tmp['enabled'] = True
        ##else: <-- not necessary as we remove the package which obviously also kills the service
        ##    tmp['state'] = 'stopped'
        ##    tmp['enabled'] = False

        export_cfgs['service'] = tmp

        pcfg = self.get_parentcfg(cfg, cfgpath_abs)
        pcfg['_module_cfgs'] = export_cfgs
        return my_subcfg


class NtpSourcesNormer(NormalizerBase):

    def __init__(self, pluginref, *args, **kwargs):
        self._add_defaultsetter(kwargs, 
          'cfgfile', DefaultSetterConstant('ans_smabot_managed.sources')
        )

        self._add_defaultsetter(kwargs, 
          'cfgdir', DefaultSetterConstant('/etc/chrony/sources.d')
        )

        subnorms = kwargs.setdefault('sub_normalizers', [])
        subnorms += [
          NtpPoolSourceNormer(pluginref),
          NtpServerSourceNormer(pluginref),
        ]

        super(NtpSourcesNormer, self).__init__(pluginref, *args, **kwargs)

    @property
    def config_path(self):
        return ['sources']

    def _handle_specifics_presub(self, cfg, my_subcfg, cfgpath_abs):
        if not my_subcfg.get('servers', None) and not my_subcfg.get('pools', None):
            ## assure one default server respectively pool is active
            ## when user did not specify any sources themselves
            my_subcfg['pools'] = {
              'ntp.ubuntu.com': {}
            }

        return my_subcfg


    def _handle_specifics_postsub(self, cfg, my_subcfg, cfgpath_abs):
        def build_srclist(src, sink):
            for k,v in src.items():
                opts = []

                for ok, ov in v.get('config').items():
                    opts.append(ok)

                    if ov is not None:
                        opts.append(ov)

                pools.append(
                   "{} {} {}".format(v['srctype'], v['name'],
                      ' '.join(map(str, opts))
                   )
                )

        pools = []
        servers = []

        build_srclist(my_subcfg['pools'], pools)
        build_srclist(my_subcfg['servers'], servers)

        export_cfg = textwrap.dedent("""
          ##
          ## This file is autogenerated by ansible role smabot.base.ntp_chrony
          ## DO NOT MODIFY IT DIRECTLY!
          ##
          """
        )

        if pools:
            export_cfg += textwrap.dedent("""
              ## pool sources
              """
            )

            export_cfg += '\n'.join(pools) + '\n'

        if servers:
            if pools:
                export_cfg += '\n'

            export_cfg += textwrap.dedent("""
              ## server sources
              """
            )

            export_cfg += '\n'.join(servers) + '\n'

        my_subcfg['_export'] = export_cfg

        my_subcfg['cfgpath'] = my_subcfg['cfgdir'] + '/' + my_subcfg['cfgfile']

        return my_subcfg


class NtpSourceBaseNormer(NormalizerNamed):

##    @property
##    def name_key(self):
##        return 'name'

    @property
    def ntp_type(self):
        return 'server'

    @property
    def config_defaults(self):
        return {
          'iburst': None,
        }

    def _handle_specifics_presub(self, cfg, my_subcfg, cfgpath_abs):
        my_subcfg['srctype'] = self.ntp_type
        c = setdefault_none(my_subcfg, 'config', {})

        for k,v in self.config_defaults.items():
            setdefault_none(c, k, v)

        return my_subcfg


class NtpServerSourceNormer(NtpSourceBaseNormer):

    def __init__(self, pluginref, *args, **kwargs):
        super(NtpServerSourceNormer, self).__init__(pluginref, *args, **kwargs)

    @property
    def config_path(self):
        return ['servers', SUBDICT_METAKEY_ANY]


class NtpPoolSourceNormer(NtpSourceBaseNormer):

    def __init__(self, pluginref, *args, **kwargs):
        super(NtpPoolSourceNormer, self).__init__(pluginref, *args, **kwargs)

    @property
    def ntp_type(self):
        return 'pool'

    @property
    def config_defaults(self):
        tmp = super(NtpPoolSourceNormer, self).config_defaults
        
        tmp.update(
          {
            'maxsources': 4,
          }
        )

        return tmp

    @property
    def config_path(self):
        return ['pools', SUBDICT_METAKEY_ANY]



class ActionModule(ConfigNormalizerBase):

    def __init__(self, *args, **kwargs):
        super(ActionModule, self).__init__(
            RootCfgNormalizer(self), *args, **kwargs
        )

        self._supports_check_mode = False
        self._supports_async = False


    @property
    def my_ansvar(self):
        return 'smabot_base_ntp_chrony_args'

    @property
    def supports_merging(self):
        return False

