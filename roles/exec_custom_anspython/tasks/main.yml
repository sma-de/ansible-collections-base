---

##
## role which allows to run arbitrary ansible code with a custom ansible 
## python interpreter overwrite
##

  - name: probe given python binary path
    ansible.builtin.stat:
      path: "{{ smabot_base_exec_custom_anspython_cfg.pybin }}"
      get_checksum: no
      get_mime: no
      get_attributes: no
    register: _tmp_statres


  - ansible.builtin.assert:
      that:
        - _tmp_statres.stat.exists
      fail_msg: >-
        Given python binary path
        '{{ smabot_base_exec_custom_anspython_cfg.pybin }}' seems
        not to exist on target.


  - ansible.builtin.assert:
      that:
        - _tmp_statres.stat.executable
      fail_msg: >-
        Given python binary path
        '{{ smabot_base_exec_custom_anspython_cfg.pybin }}' seems
        not to be an executable or current user has no rights 
        to access it.


  - set_fact:
      _tmp_doing_role: false
      _tmp_doing_tasks: false


  - block:

      - set_fact:
          _tmp_doing_role: true

      - include_role:
          name: "{{ smabot_base_exec_custom_anspython_cfg.role }}"
        vars:
          ansible_python_interpreter: "{{ smabot_base_exec_custom_anspython_cfg.pybin }}"

    when: smabot_base_exec_custom_anspython_cfg.get('role', False)


  - block:

      - set_fact:
          _tmp_doing_tasks: true

      - include_tasks: "{{ smabot_base_exec_custom_anspython_cfg.tasks }}"
        vars:
          ansible_python_interpreter: "{{ smabot_base_exec_custom_anspython_cfg.pybin }}"

    when: smabot_base_exec_custom_anspython_cfg.get('tasks', False)


  - ansible.builtin.assert:
      that:
        - _tmp_doing_role or _tmp_doing_tasks
      fail_msg: >-
        Nothing called inside custom anspython environment,
        either specify a tasks script or a role to run.

