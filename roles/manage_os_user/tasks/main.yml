---

##
## role which takes care of managing system user accounts
##
##
## smabot_base_manage_os_user_args:
##   users:
##     users:
##       <user-id>:
##         name: <-- defaults to mapkey
##
##         ## optionally specify one or more secret sinks where secrets are saved to
##         secret_sinks:
##           my_hvault:
##             type: hashivault
##             config:
##               ##server_url:  ## optional, might be read from "environment"
##               ##auth_creds:  ## optional, might be read from "environment"
##               mountpoint:
##               path:
##
##
##         ## example: use predefined pw simple settings
##         password: "secret-pw"
##
##         ## example: use predefined pw submap spec (equivalent to example above)
##         password:
##           value:  "secret-pw"
##
##         ## example: autogen pw default opts (default when no explicit value is given)
##         password:
##           autogen: true
##
##         ## example: autogen pw custom settings
##         password:
##           autogen:
##             config:
##               length: 99
##
##         ## example: autogen pw cycle / change it every time this play is run (default for autogen)
##         password:
##           autogen:
##             cycle: true
##
##         ## example: explicity requesting pw saving to sink (is default on when sinks are defined)
##         password:
##           autogen:
##             cycle: true
##           save_to_sinks: true / list of sinks to put to
##
##         ## example: save to sink, overwrite basic secret_sinks settings
##         password:
##           autogen:
##             cycle: true
##           save_to_sinks:
##             sinks:
##               my_hvault:
##                 path:
##                 key: <-- defaults to password
##
##         ## example: create ssh access for user, default settings
##         ssh: true
##
##         ## example: create ssh access for user, predefined ssh key
##         ssh:
##           keys_exclusive: true / false  ## if keys given here are exhaustive (any not mentioned key here will be removed from accepted keys), defaults to true
##           keygen:
##             key_id1: ## <-- similar to password, but we can have arbitrary many keys
##               values:
##                 ##private: <-- optional, not really necessary, only thing done with it optionally is adding it to secret_sinks
##                 public:
##
##             key_id2:
##               ## short form for above
##               keygen: "<public-key>"
##
##             key_id3:
##               autogen:
##                 <options>
##                 comment: "<key-id> -- autogenerated by ansible"
##                 cycle: true / false
##               save_to_sinks: <-- see pw examples
##
##         configs:
##           ## verbatim user mod settings
##           user:
##

## ensure user exists or not??
## optionally auto generate pw
## optionally handle ssh key / access
## optionally auto generate ssh key
## optionally cycle secrets on each run
## optionally save credentials to defined sinks


  - smabot.base.normalize_manage_os_user_args:
    register: _tmp_normed_cfg
    no_log: true  ## might contain secrets (passwords / ssh private keys

  - set_fact:
      smabot_base_manage_os_user_args_normed: "{{ _tmp_normed_cfg.normalized }}"
    no_log: true  ## might contain secrets (passwords / ssh private keys


  - include_tasks: handle_user.yml
    loop: "{{ smabot_base_manage_os_user_args_normed.users.users | dict2items() }}"
    loop_control:
      loop_var: _iter_users


  - block:

      - set_fact:
          smabot_base_setup_sudo_args: >-
             {{ smabot_base_manage_os_user_args_normed.users._sudocfg }}

      - name: optionally handle users sudo access
        ansible.builtin.include_role:
          name: smabot.base.setup_sudo

    when: smabot_base_manage_os_user_args_normed.users._sudocfg is truthy

